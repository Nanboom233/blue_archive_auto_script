import json
from typing import Any, Dict
from core.config.default_config import DEFAULT_CONFIG, STATIC_DEFAULT_CONFIG


# 生成 dataclass 的 Python 代码
def generate_dataclass_code(class_name: str, json_data: Dict[str, Any]) -> str:
    lines = []
    lines.append("# This file is auto generated by develop_tools/generate_dataclass_code.py\n")
    lines.append("# Do not modify it manually\n")
    # 添加 dataclass 装饰器和导入语句
    lines.append("from dataclasses import dataclass\n\n")
    lines.append(f"\n@dataclass\n")
    lines.append(f"class {class_name}:\n")

    for key, value in json_data.items():
        # 自动推测字段类型
        field_type = type(value).__name__

        # 生成每个字段的定义
        lines.append(f"    {key}: {field_type}\n")

    return ''.join(lines)


def save_generated_code(code: str, path="config.py"):
    with open(path, "w", encoding="utf-8") as f:
        f.write(code)


# user config
json_data = json.loads(DEFAULT_CONFIG)
dataclass_code = generate_dataclass_code("Config", json_data)
save_generated_code(dataclass_code, path="../core/config/generated_user_config.py")

# static config
json_data = json.loads(STATIC_DEFAULT_CONFIG)
dataclass_code = generate_dataclass_code("StaticConfig", json_data)
save_generated_code(dataclass_code, path="../core/config/generated_static_config.py")
